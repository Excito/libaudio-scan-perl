%{
/*
 * libid3tag - ID3 tag manipulation library
 * Copyright (C) 2000-2004 Underbit Technologies, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id: /sd/opensource/trunk/Audio-Scan/src/id3_frametype.gperf 62165 2010-03-23T18:18:05.215904Z andy  $
 */

#define FIELDS(id)  static enum id3_field_type const fields_##id[]

/* frame field descriptions */

FIELDS(UFID) = {
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(TXXX) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_STRING
};

FIELDS(WXXX) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_LATIN1
};

FIELDS(MCDI) = {
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(ETCO) = {
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(MLLT) = {
  ID3_FIELD_TYPE_INT16,
  ID3_FIELD_TYPE_INT24,
  ID3_FIELD_TYPE_INT24,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(SYTC) = {
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(USLT) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LANGUAGE,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_STRINGFULL
};

FIELDS(SYLT) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LANGUAGE,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(COMM) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LANGUAGE,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_STRINGFULL
};

FIELDS(RVA2) = {
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(EQU2) = {
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(RVRB) = {
  ID3_FIELD_TYPE_INT16,
  ID3_FIELD_TYPE_INT16,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT8
};

FIELDS(APIC) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(GEOB) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(PCNT) = {
  ID3_FIELD_TYPE_INT32PLUS
};

FIELDS(POPM) = {
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT32PLUS
};

FIELDS(RBUF) = {
  ID3_FIELD_TYPE_INT24,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_INT32
};

FIELDS(AENC) = {
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_INT16,
  ID3_FIELD_TYPE_INT16,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(LINK) = {
  ID3_FIELD_TYPE_FRAMEID,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_LATIN1LIST
};

FIELDS(POSS) = {
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(USER) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LANGUAGE,
  ID3_FIELD_TYPE_STRING
};

FIELDS(OWNE) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_DATE,
  ID3_FIELD_TYPE_STRING
};

FIELDS(COMR) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_DATE,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_STRING,
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(ENCR) = {
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(GRID) = {
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(PRIV) = {
  ID3_FIELD_TYPE_LATIN1,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(SIGN) = {
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(SEEK) = {
  ID3_FIELD_TYPE_INT32
};

FIELDS(ASPI) = {
  ID3_FIELD_TYPE_INT32,
  ID3_FIELD_TYPE_INT32,
  ID3_FIELD_TYPE_INT16,
  ID3_FIELD_TYPE_INT8,
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(text) = {
  ID3_FIELD_TYPE_TEXTENCODING,
  ID3_FIELD_TYPE_STRINGLIST
};

FIELDS(url) = {
  ID3_FIELD_TYPE_LATIN1
};

FIELDS(unknown) = {
  ID3_FIELD_TYPE_BINARYDATA
};

FIELDS(ZOBS) = {
  ID3_FIELD_TYPE_FRAMEID,
  ID3_FIELD_TYPE_BINARYDATA
};

#define FRAME(id)  \
  sizeof(fields_##id) / sizeof(fields_##id[0]), fields_##id

#define FRAMETYPE(type, id, desc)  \
  id3_frametype const id3_frametype_##type = {  \
    0, FRAME(id), desc  \
  }

/* static frame types */

FRAMETYPE(text,         text,     "Unknown text information frame");
FRAMETYPE(url,          url,      "Unknown URL link frame");
FRAMETYPE(experimental, unknown,  "Experimental frame");
FRAMETYPE(unknown,      unknown,  "Unknown frame");
FRAMETYPE(obsolete,     unknown,  "Obsolete frame");
%}
%define hash-function-name frametype_hash
struct id3_frametype;
%%
#
# ID3v2.4 frames
#
AENC, FRAME(AENC), "Audio encryption"
APIC, FRAME(APIC), "Attached picture"
ASPI, FRAME(ASPI), "Audio seek point index"
COMM, FRAME(COMM), "Comments"
COMR, FRAME(COMR), "Commercial frame"
ENCR, FRAME(ENCR), "Encryption method registration"
EQU2, FRAME(EQU2), "Equalisation (2)"
ETCO, FRAME(ETCO), "Event timing codes"
GEOB, FRAME(GEOB), "General encapsulated object"
GRID, FRAME(GRID), "Group identification registration"
LINK, FRAME(LINK), "Linked information"
MCDI, FRAME(MCDI), "Music CD identifier"
MLLT, FRAME(MLLT), "MPEG location lookup table"
OWNE, FRAME(OWNE), "Ownership frame"
PCNT, FRAME(PCNT), "Play counter"
POPM, FRAME(POPM), "Popularimeter"
POSS, FRAME(POSS), "Position synchronisation frame"
PRIV, FRAME(PRIV), "Private frame"
RBUF, FRAME(RBUF), "Recommended buffer size"
RVA2, FRAME(RVA2), "Relative volume adjustment (2)"
RVRB, FRAME(RVRB), "Reverb"
SEEK, FRAME(SEEK), "Seek frame"
SIGN, FRAME(SIGN), "Signature frame"
SYLT, FRAME(SYLT), "Synchronised lyric/text"
SYTC, FRAME(SYTC), "Synchronised tempo codes"
TALB, FRAME(text), "Album/movie/show title"
TBPM, FRAME(text), "BPM (beats per minute)"
TCOM, FRAME(text), "Composer"
TCON, FRAME(text), "Content type"
TCOP, FRAME(text), "Copyright message"
TDEN, FRAME(text), "Encoding time"
TDLY, FRAME(text), "Playlist delay"
TDOR, FRAME(text), "Original release time"
TDRC, FRAME(text), "Recording time"
TDRL, FRAME(text), "Release time"
TDTG, FRAME(text), "Tagging time"
TENC, FRAME(text), "Encoded by"
TEXT, FRAME(text), "Lyricist/text writer"
TFLT, FRAME(text), "File type"
TIPL, FRAME(text), "Involved people list"
TIT1, FRAME(text), "Content group description"
TIT2, FRAME(text), "Title/songname/content description"
TIT3, FRAME(text), "Subtitle/description refinement"
TKEY, FRAME(text), "Initial key"
TLAN, FRAME(text), "Language(s)"
TLEN, FRAME(text), "Length"
TMCL, FRAME(text), "Musician credits list"
TMED, FRAME(text), "Media type"
TMOO, FRAME(text), "Mood"
TOAL, FRAME(text), "Original album/movie/show title"
TOFN, FRAME(text), "Original filename"
TOLY, FRAME(text), "Original lyricist(s)/text writer(s)"
TOPE, FRAME(text), "Original artist(s)/performer(s)"
TOWN, FRAME(text), "File owner/licensee"
TPE1, FRAME(text), "Lead performer(s)/soloist(s)"
TPE2, FRAME(text), "Band/orchestra/accompaniment"
TPE3, FRAME(text), "Conductor/performer refinement"
TPE4, FRAME(text), "Interpreted, remixed, or otherwise modified by"
TPOS, FRAME(text), "Part of a set"
TPRO, FRAME(text), "Produced notice"
TPUB, FRAME(text), "Publisher"
TRCK, FRAME(text), "Track number/position in set"
TRSN, FRAME(text), "Internet radio station name"
TRSO, FRAME(text), "Internet radio station owner"
TSOA, FRAME(text), "Album sort order"
TSOP, FRAME(text), "Performer sort order"
TSOT, FRAME(text), "Title sort order"
TSRC, FRAME(text), "ISRC (international standard recording code)"
TSSE, FRAME(text), "Software/hardware and settings used for encoding"
TSST, FRAME(text), "Set subtitle"
TXXX, FRAME(TXXX), "User defined text information frame"
UFID, FRAME(UFID), "Unique file identifier"
USER, FRAME(USER), "Terms of use"
USLT, FRAME(USLT), "Unsynchronised lyric/text transcription"
WCOM, FRAME(url),  "Commercial information"
WCOP, FRAME(url),  "Copyright/legal information"
WOAF, FRAME(url),  "Official audio file webpage"
WOAR, FRAME(url),  "Official artist/performer webpage"
WOAS, FRAME(url),  "Official audio source webpage"
WORS, FRAME(url),  "Official Internet radio station homepage"
WPAY, FRAME(url),  "Payment"
WPUB, FRAME(url),  "Publishers official webpage"
WXXX, FRAME(WXXX), "User defined URL link frame"
XSOP, FRAME(text), "Performer sort order (v2.3)"
#
# Special frames
#
ZOBS, FRAME(ZOBS), "Obsolete frame"
